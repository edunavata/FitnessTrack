openapi: 3.1.0
info:
  title: FitnessTrack Public API
  version: 1.0.0
  description: >-
    REST API for the FitnessTrack platform. All endpoints respond with JSON and
    leverage RFC 7807 problem-details for errors.
servers:
  - url: /api/v1
    description: Version 1 base path
security:
  - bearerAuth: []
tags:
  - name: System
  - name: Users
  - name: Subjects
  - name: Exercises
  - name: Routines
  - name: Cycles
  - name: SubjectRoutines
  - name: Workouts
paths:
  /health:
    get:
      tags: [System]
      operationId: getHealth
      summary: Readiness and liveness probe
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  db:
                    type: object
                    properties:
                      status:
                        type: string
                  latency_ms:
                    type: number
                    format: float
        '503':
          $ref: '#/components/responses/Problem'
  /users:
    get:
      tags: [Users]
      operationId: listUsers
      summary: List users
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - name: email
          in: query
          schema:
            type: string
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Users page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPage'
        '400':
          $ref: '#/components/responses/Problem'
    post:
      tags: [Users]
      operationId: createUser
      summary: Create user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created user
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          $ref: '#/components/responses/Problem'
        '422':
          $ref: '#/components/responses/Problem'
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [Users]
      operationId: getUser
      summary: Retrieve user
      responses:
        '200':
          description: User document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Users]
      operationId: updateUser
      summary: Update user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '412':
          $ref: '#/components/responses/Problem'
    delete:
      tags: [Users]
      operationId: deleteUser
      summary: Delete user
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted
        '412':
          $ref: '#/components/responses/Problem'
  /subjects:
    get:
      tags: [Subjects]
      operationId: listSubjects
      summary: List subjects
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - name: user_id
          in: query
          schema:
            type: integer
        - name: pseudonym
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Subject page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectPage'
    post:
      tags: [Subjects]
      operationId: createSubject
      summary: Create subject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectCreate'
      responses:
        '201':
          description: Created subject
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
  /subjects/{subjectId}:
    parameters:
      - $ref: '#/components/parameters/SubjectId'
    get:
      tags: [Subjects]
      operationId: getSubject
      summary: Retrieve subject
      responses:
        '200':
          description: Subject document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '404':
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Subjects]
      operationId: updateSubject
      summary: Update subject
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectUpdate'
      responses:
        '200':
          description: Updated subject
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '412':
          $ref: '#/components/responses/Problem'
    delete:
      tags: [Subjects]
      operationId: deleteSubject
      summary: Delete subject
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted
  /subjects/{subjectId}/profile:
    parameters:
      - $ref: '#/components/parameters/SubjectId'
    get:
      tags: [Subjects]
      operationId: getSubjectProfile
      summary: Retrieve subject profile
      responses:
        '200':
          description: Subject profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectProfile'
        '404':
          $ref: '#/components/responses/Problem'
    put:
      tags: [Subjects]
      operationId: upsertSubjectProfile
      summary: Replace subject profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectProfileUpdate'
      responses:
        '200':
          description: Profile document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectProfile'
        '412':
          $ref: '#/components/responses/Problem'
  /subjects/{subjectId}/body-metrics:
    parameters:
      - $ref: '#/components/parameters/SubjectId'
    get:
      tags: [Subjects]
      operationId: listBodyMetrics
      summary: List body metrics
      parameters:
        - name: measured_on
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Body metrics page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyMetricPage'
    post:
      tags: [Subjects]
      operationId: createBodyMetric
      summary: Create body metric
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyMetric'
      responses:
        '201':
          description: Created metric
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyMetric'
  /subjects/{subjectId}/body-metrics/{metricId}:
    parameters:
      - $ref: '#/components/parameters/SubjectId'
      - name: metricId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Subjects]
      operationId: getBodyMetric
      summary: Retrieve body metric
      responses:
        '200':
          description: Metric document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyMetric'
        '404':
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Subjects]
      operationId: updateBodyMetric
      summary: Update body metric
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyMetricUpdate'
      responses:
        '200':
          description: Updated metric
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyMetric'
    delete:
      tags: [Subjects]
      operationId: deleteBodyMetric
      summary: Delete body metric
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted
  /exercises:
    get:
      tags: [Exercises]
      operationId: listExercises
      summary: List exercises
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - name: name
          in: query
          schema:
            type: string
        - name: primary_muscle
          in: query
          schema:
            type: string
        - name: equipment
          in: query
          schema:
            type: string
        - name: is_active
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Exercise page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExercisePage'
    post:
      tags: [Exercises]
      operationId: createExercise
      summary: Create exercise
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseCreate'
      responses:
        '201':
          description: Created exercise
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
  /exercises/{exerciseId}:
    parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Exercises]
      operationId: getExercise
      summary: Retrieve exercise
      responses:
        '200':
          description: Exercise document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '404':
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Exercises]
      operationId: updateExercise
      summary: Update exercise
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseUpdate'
      responses:
        '200':
          description: Updated exercise
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '412':
          $ref: '#/components/responses/Problem'
    delete:
      tags: [Exercises]
      operationId: softDeleteExercise
      summary: Soft delete exercise
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Exercise marked inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
  /exercises/meta/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Exercises]
      operationId: getExerciseEnum
      summary: Get exercise reference enumeration
      responses:
        '200':
          description: Enumeration values
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  values:
                    type: array
                    items:
                      type: string
        '404':
          $ref: '#/components/responses/Problem'
  /routines:
    get:
      tags: [Routines]
      operationId: listRoutines
      summary: List routines
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - name: owner_subject_id
          in: query
          schema:
            type: integer
        - name: is_public
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Routine page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutinePage'
    post:
      tags: [Routines]
      operationId: createRoutine
      summary: Create routine
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutineCreate'
      responses:
        '201':
          description: Created routine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
  /routines/{routineId}:
    parameters:
      - $ref: '#/components/parameters/RoutineId'
    get:
      tags: [Routines]
      operationId: getRoutine
      summary: Retrieve routine
      responses:
        '200':
          description: Routine document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
        '404':
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Routines]
      operationId: updateRoutine
      summary: Update routine
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutineUpdate'
      responses:
        '200':
          description: Updated routine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
    delete:
      tags: [Routines]
      operationId: deleteRoutine
      summary: Delete routine
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted
  /routines/{routineId}/days:
    parameters:
      - $ref: '#/components/parameters/RoutineId'
    get:
      tags: [Routines]
      operationId: listRoutineDays
      summary: List routine days
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Routine days page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutineDayPage'
    post:
      tags: [Routines]
      operationId: createRoutineDay
      summary: Create routine day
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutineDayCreate'
      responses:
        '201':
          description: Created routine day
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutineDay'
  /routines/{routineId}/days/{dayId}:
    parameters:
      - $ref: '#/components/parameters/RoutineId'
      - name: dayId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Routines]
      operationId: getRoutineDay
      summary: Retrieve routine day
      responses:
        '200':
          description: Routine day
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutineDay'
        '404':
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Routines]
      operationId: updateRoutineDay
      summary: Update routine day
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutineDayUpdate'
      responses:
        '200':
          description: Updated day
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutineDay'
    delete:
      tags: [Routines]
      operationId: deleteRoutineDay
      summary: Delete routine day
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted
  /cycles:
    get:
      tags: [Cycles]
      operationId: listCycles
      summary: List cycles
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - name: subject_id
          in: query
          schema:
            type: integer
        - name: routine_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Cycle page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CyclePage'
    post:
      tags: [Cycles]
      operationId: createCycle
      summary: Create cycle
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cycle'
      responses:
        '201':
          description: Created cycle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cycle'
  /cycles/{cycleId}:
    parameters:
      - name: cycleId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Cycles]
      operationId: getCycle
      summary: Retrieve cycle
      responses:
        '200':
          description: Cycle document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cycle'
        '404':
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Cycles]
      operationId: updateCycle
      summary: Update cycle
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CycleUpdate'
      responses:
        '200':
          description: Updated cycle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cycle'
    delete:
      tags: [Cycles]
      operationId: deleteCycle
      summary: Delete cycle
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted
  /subject-routines:
    get:
      tags: [SubjectRoutines]
      operationId: listSubjectRoutines
      summary: List subject-routine links
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Link page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectRoutinePage'
    post:
      tags: [SubjectRoutines]
      operationId: createSubjectRoutine
      summary: Create link
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectRoutineCreate'
      responses:
        '201':
          description: Created link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectRoutine'
  /subject-routines/{linkId}:
    parameters:
      - name: linkId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [SubjectRoutines]
      operationId: getSubjectRoutine
      summary: Retrieve link
      responses:
        '200':
          description: Link document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectRoutine'
        '404':
          $ref: '#/components/responses/Problem'
    delete:
      tags: [SubjectRoutines]
      operationId: deleteSubjectRoutine
      summary: Delete link
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted
  /workouts/sessions:
    get:
      tags: [Workouts]
      operationId: listWorkoutSessions
      summary: List workout sessions
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Session page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSessionPage'
    post:
      tags: [Workouts]
      operationId: createWorkoutSession
      summary: Create workout session
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutSession'
      responses:
        '201':
          description: Created session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
  /workouts/sessions/{sessionId}:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Workouts]
      operationId: getWorkoutSession
      summary: Retrieve workout session
      responses:
        '200':
          description: Session document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
        '404':
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Workouts]
      operationId: updateWorkoutSession
      summary: Update workout session
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutSessionUpdate'
      responses:
        '200':
          description: Updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
    delete:
      tags: [Workouts]
      operationId: deleteWorkoutSession
      summary: Delete workout session
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted
  /workouts/set-logs:
    get:
      tags: [Workouts]
      operationId: listExerciseSetLogs
      summary: List exercise logs
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Log page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseSetLogPage'
    post:
      tags: [Workouts]
      operationId: createExerciseSetLog
      summary: Create exercise log
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseSetLog'
      responses:
        '201':
          description: Created log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseSetLog'
  /workouts/set-logs/{logId}:
    parameters:
      - name: logId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Workouts]
      operationId: getExerciseSetLog
      summary: Retrieve log
      responses:
        '200':
          description: Log document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseSetLog'
        '404':
          $ref: '#/components/responses/Problem'
    patch:
      tags: [Workouts]
      operationId: updateExerciseSetLog
      summary: Update log
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseSetLogUpdate'
      responses:
        '200':
          description: Updated log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseSetLog'
    delete:
      tags: [Workouts]
      operationId: deleteExerciseSetLog
      summary: Delete log
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
      description: Page number (1-indexed)
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 200
      description: Page size
    Sort:
      name: sort
      in: query
      schema:
        type: string
      description: Comma separated sort fields, prefix with '-' for descending.
    UserId:
      name: userId
      in: path
      required: true
      schema:
        type: integer
    SubjectId:
      name: subjectId
      in: path
      required: true
      schema:
        type: integer
    RoutineId:
      name: routineId
      in: path
      required: true
      schema:
        type: integer
  responses:
    Problem:
      description: Problem details error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
  schemas:
    Problem:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
        code:
          type: string
        errors:
          oneOf:
            - type: object
            - type: array
              items:
                type: object
    PageEnvelope:
      type: object
      properties:
        items:
          type: array
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
      required: [items, page, limit, total]
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        username:
          type: string
        full_name:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, email, username]
    UserCreate:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required: [email, username, password]
          properties:
            password:
              type: string
              format: password
    UserUpdate:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        full_name:
          type: string
          nullable: true
        password:
          type: string
    UserPage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/User'
    Subject:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
          nullable: true
        pseudonym:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    SubjectCreate:
      type: object
      properties:
        user_id:
          type: integer
          nullable: true
    SubjectUpdate:
      type: object
      properties:
        user_id:
          type: integer
          nullable: true
    SubjectPage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Subject'
    SubjectProfile:
      type: object
      properties:
        id:
          type: integer
        subject_id:
          type: integer
        sex:
          type: string
          nullable: true
        birth_year:
          type: integer
          nullable: true
        height_cm:
          type: integer
          nullable: true
        dominant_hand:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    SubjectProfileUpdate:
      type: object
      properties:
        sex:
          type: string
        birth_year:
          type: integer
        height_cm:
          type: integer
        dominant_hand:
          type: string
    BodyMetric:
      type: object
      properties:
        id:
          type: integer
        subject_id:
          type: integer
        measured_on:
          type: string
          format: date
        weight_kg:
          type: number
          format: float
        bodyfat_pct:
          type: number
          format: float
        resting_hr:
          type: integer
          nullable: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BodyMetricUpdate:
      type: object
      properties:
        measured_on:
          type: string
          format: date
        weight_kg:
          type: number
          format: float
        bodyfat_pct:
          type: number
          format: float
        resting_hr:
          type: integer
        notes:
          type: string
    BodyMetricPage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/BodyMetric'
    Exercise:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        primary_muscle:
          type: string
        movement:
          type: string
        mechanics:
          type: string
        force:
          type: string
        unilateral:
          type: boolean
        equipment:
          type: string
        difficulty:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ExerciseCreate:
      allOf:
        - $ref: '#/components/schemas/Exercise'
    ExerciseUpdate:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        primary_muscle:
          type: string
        movement:
          type: string
        mechanics:
          type: string
        force:
          type: string
        unilateral:
          type: boolean
        equipment:
          type: string
        difficulty:
          type: string
        is_active:
          type: boolean
    ExercisePage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Exercise'
    Routine:
      type: object
      properties:
        id:
          type: integer
        owner_subject_id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        is_public:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    RoutineCreate:
      allOf:
        - $ref: '#/components/schemas/Routine'
    RoutineUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        is_public:
          type: boolean
    RoutinePage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Routine'
    RoutineDay:
      type: object
      properties:
        id:
          type: integer
        routine_id:
          type: integer
        day_index:
          type: integer
        is_rest:
          type: boolean
        title:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
    RoutineDayCreate:
      allOf:
        - $ref: '#/components/schemas/RoutineDay'
    RoutineDayUpdate:
      type: object
      properties:
        day_index:
          type: integer
        is_rest:
          type: boolean
        title:
          type: string
        notes:
          type: string
    RoutineDayPage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/RoutineDay'
    Cycle:
      type: object
      properties:
        id:
          type: integer
        subject_id:
          type: integer
        routine_id:
          type: integer
        cycle_number:
          type: integer
        started_on:
          type: string
          format: date
          nullable: true
        ended_on:
          type: string
          format: date
          nullable: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CycleUpdate:
      type: object
      properties:
        started_on:
          type: string
          format: date
        ended_on:
          type: string
          format: date
        notes:
          type: string
    CyclePage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Cycle'
    SubjectRoutine:
      type: object
      properties:
        id:
          type: integer
        subject_id:
          type: integer
        routine_id:
          type: integer
        is_active:
          type: boolean
        saved_on:
          type: string
          format: date-time
    SubjectRoutineCreate:
      allOf:
        - $ref: '#/components/schemas/SubjectRoutine'
    SubjectRoutinePage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/SubjectRoutine'
    WorkoutSession:
      type: object
      properties:
        id:
          type: integer
        subject_id:
          type: integer
        workout_date:
          type: string
          format: date-time
        status:
          type: string
        routine_day_id:
          type: integer
          nullable: true
        cycle_id:
          type: integer
          nullable: true
        location:
          type: string
          nullable: true
        perceived_fatigue:
          type: integer
          nullable: true
        bodyweight_kg:
          type: number
          format: float
          nullable: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    WorkoutSessionUpdate:
      type: object
      properties:
        workout_date:
          type: string
          format: date-time
        status:
          type: string
        routine_day_id:
          type: integer
        cycle_id:
          type: integer
        location:
          type: string
        perceived_fatigue:
          type: integer
        bodyweight_kg:
          type: number
          format: float
        notes:
          type: string
    WorkoutSessionPage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/WorkoutSession'
    ExerciseSetLog:
      type: object
      properties:
        id:
          type: integer
        subject_id:
          type: integer
        exercise_id:
          type: integer
        session_id:
          type: integer
          nullable: true
        planned_set_id:
          type: integer
          nullable: true
        performed_at:
          type: string
          format: date-time
        set_index:
          type: integer
        is_warmup:
          type: boolean
        to_failure:
          type: boolean
        actual_weight_kg:
          type: number
          format: float
          nullable: true
        actual_reps:
          type: integer
          nullable: true
        actual_rir:
          type: integer
          nullable: true
        actual_rpe:
          type: number
          format: float
          nullable: true
        actual_tempo:
          type: string
          nullable: true
        actual_rest_s:
          type: integer
          nullable: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ExerciseSetLogUpdate:
      type: object
      properties:
        exercise_id:
          type: integer
        session_id:
          type: integer
        planned_set_id:
          type: integer
        performed_at:
          type: string
          format: date-time
        set_index:
          type: integer
        is_warmup:
          type: boolean
        to_failure:
          type: boolean
        actual_weight_kg:
          type: number
          format: float
        actual_reps:
          type: integer
        actual_rir:
          type: integer
        actual_rpe:
          type: number
          format: float
        actual_tempo:
          type: string
        actual_rest_s:
          type: integer
        notes:
          type: string
    ExerciseSetLogPage:
      allOf:
        - $ref: '#/components/schemas/PageEnvelope'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ExerciseSetLog'
